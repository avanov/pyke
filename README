Pyke: Python Knowledge Engine

Version: 1.0.1

Both forward-chaining and backward-chaining rules (which may include python
code) are compiled into python. Can also automatically assemble python
programs out of python functions which are attached to backward-chaining
rules.

COPYRIGHT AND LICENSE:

This is published under the MIT License.  The copyright and license are in
the file "copyright_license".

DOCUMENTATION:

The documentation is at:

    http://pyke.sourceforge.net

You can download a copy of this documentation to your hard drive:

    pyke_doc_html-1.0.1.tar.gz

See the end of this file for how to regenerate the html files.


INSTALLATION:

Pyke requires python 2.5 (or later 2.x release).  Check with:

    $ python --version

You can download this at:

    http://www.python.org

There is another branch of Pyke that is ready for Python3.x.  If you want
Python3.x support, read this:

    http://pyke.svn.sourceforge.net/viewvc/pyke/branches/pre_2to3/README-3.0

Otherwise (if you want Pyke on Python2.5 or later 2.x release)...

To install pyke with easy_install, at the shell prompt just type:

    $ easy_install pyke

If you don't have easy_install, you can install it by looking at:

    http://pypi.python.org/pypi/setuptools/

Then you've got two choices for pyke:

    pyke-1.0.1-py2.5.egg (used by easy_install)
 or the source distribution (see next section)


SOURCE DISTRIBUTION:

The pyke source distribution is the file:

    pyke-1.0.1.tar.gz

This contains the pyke source code, documentation (both source and html), and
examples.

EXAMPLES:

Pyke examples may be downloaded separately from sourceforge if you've used
easy_install to install pyke (or installed the .egg file):

    pyke_examples-1.0.1.tar.gz

You need to unpack this into a directory that is on your PYTHON PATH.

Each example has a README file that explains how to run it.

The family_relations example is a good place to start.  It shows several
solutions to the same problem.  It also has an example of a few rule
optimizations that result in a 100 times performance improvement on this
problem.

The sqlgen example uses Sqlite3 (or MySQL) and the python sqlite3 (or MySQLdb)
modules.  It has a function that reads the schema information into pyke facts.
Then the rules in database.krb automatically figure out how to join tables
together to retrieve a list of column names, generate the SQL select
statements and return a plan to execute this SQL statement and return the
results as a dictionary.

The web_framework example uses the sqlgen example.  This demonstrates the use
of multiple rule bases.  The web_framework is a WSGI application that uses the
HTMLTemplate package (install this with "easy_install HTMLTemplate", be sure to
get version 1.5 or later).  It gets the column names from the HTMLTemplate and
feeds those to the sqlgen example to generate a plan to retrieve the data.  It
then builds a plan to populate the template and return the finished HTML
document.  It also caches the plans so that they don't have to be re-generated
for each request.  This makes it run a full 10 times faster than the same
example done in TurboGears 2!  The example includes a wsgiref simple_server
setup to run it as an http server so that you can access it through your
browser.

The learn_pyke example is an incomplete attempt at a computer based training
program.  It only deals with the topic of pattern matching.  It is left here
as an example of using question bases.

The findall, forall, knapsack, notany and towers_of_hanoi examples are each
very small.


TO INSTALL FROM THE SOURCES:

    $ python setup.py install


RUNNING DOCTESTS:

To run doctests on all *.py files in the pyke directory, cd to the pyke
directory and:

    $ ./testpyke

To run doctests on the whole source directory, cd to the top-level directory
and:

    $ ./testall


COMPILING kfbparser_tables.py, krbparser_tables.py and scanner_tables.py:

    $ python
    >>> from pyke.krb_compiler import kfbparser, krbparser, scanner
    >>> scanner.init(scanner, 0, True)
    >>> krbparser.init(krbparser, True)
    >>> kfbparser.init(kfbparser, True)

    or just run testpyke:

    $ cd pyke
    $ ./testpyke


COMPILING THE COMPILER.KRB FILE:

In pyke/krb_compiler:

    $ python
    >>> from pyke import krb_compiler
    >>> krb_compiler.compile_krb('compiler', 'compiled_krb', 'compiled_krb', 'compiler.krb')
    $ mv compiled_krb/compiler_bc.py .

COMPILING THE DOCUMENTATION:

To compile the documentation into html, you'll need docutils and rest2web.
If you're running linux, your distro may have packages for these already.
Or you can:

    $ easy_install rest2web

I used version 0.4.1 of docutils and 0.5.0 of rest2web.  I don't know if
earlier versions work OK or not.

To check your versions:

    $ python
    >>> import docutils
    >>> docutils.__version__
    >>> import rest2web
    >>> rest2web.__version__

If your linux distro doesn't have packages for these, and you don't want to
use easy_install, you can get them at:

    http://sourceforge.net/projects/docutils
    http://sourceforge.net/projects/rest2web

To regenerate the html:

    $ cd doc/source
    $ bin/gen_html

This regenerates everything from doc/source into doc/html.  It takes about
9 seconds to run.

If you want to run doctest on all of the *.txt files in doc/source:

    $ cd doc
    $ ./testdocs

