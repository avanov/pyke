# $Id$
# 
# Copyright Â© 2007 Bruce Frederiksen
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

file:
    use compile($rb_name,
                (file, $parent,
                       ($fc_rules, $fc_extra_lines),
                       ($bc_rules, $bc_extra_lines, $plan_extra_lines)),
                $fc_lines, $bc_lines, $plan_lines)
    when
        $fc_head = helpers.fc_head($rb_name)
        $bc_head = helpers.bc_head($rb_name)
        !rule_decl($rb_name, $parent, $decl_line)
        !fc_rules($fc_rules, $fc_fun_lines, $fc_init_lines)
        !bc_rules($rb_name, $bc_rules,
                  $bc_plan_lines, $bc_bc_fun_lines, $bc_bc_init_lines)
        $fc_lines = ($fc_head,
                     $fc_fun_lines,
                     "",
                     $decl_line,
                     $fc_init_lines,
                     "",
                     $fc_extra_lines,
                     ) \
                        if $fc_fun_lines \
                        else ()
        $plan_lines = (("# %s_plans.py" % $rb_name,) +
                       $bc_plan_lines + ("",) + $plan_extra_lines) \
                        if $bc_plan_lines \
                        else ()
        $bc_lines = ($bc_head,
                     ("import %s_plans" % $rb_name
                          if $bc_plan_lines
                          else ()),
                     $bc_bc_fun_lines,
                     "",
                     $decl_line,
                     $bc_bc_init_lines,
                     "",
                     $bc_extra_lines) \
                        if $bc_bc_fun_lines \
                        else ()

rule_decl:
    use rule_decl($rb_name, None, $decl_line)
    when
        $decl_line = "This_rule_base = rule_base.get_create('%s')" % $rb_name

rule_decl_with_parent:
    use rule_decl($rb_name, (parent, $parent, $excluded_symbols), $decl_line)
    when
        $decl_line = "This_rule_base = rule_base.get_create('%s', '%s', %s)" % \
                         ($rb_name, $parent,
                          tuple(repr(sym) for sym in $excluded_symbols))

fc_rules0:
    use fc_rules((), (), ())

fc_rules1:
    use fc_rules(($fc_rule, *$fc_rest),
                 ($fc_fun_1, $fc_funs_rest),
                 ($fc_init_1, $fc_init_rest))
    when
        !fc_rule($fc_rule, $fc_fun_1, $fc_init_1)
        !fc_rules($fc_rest, $fc_funs_rest, $fc_init_rest)

fc_rule_:
    use fc_rule((fc_rule, $rule_name, $fc_premises, $assertions),
                $fc_fun, $fc_init)
    when
        !fc_premises($rule_name, 0, $fc_premises,
                     $prem_fn_head, $prem_fn_tail, $prem_decl_lines,
                     (), $patterns_out1)
        !assertions($assertions, $asserts_fn_lines,
                    $patterns_out1, $patterns_out)
        $fc_fun = ("",
                   "def %s(rule, context = None, index = None):" % $rule_name,
                   ("INDENT", 2),
                   "if context is None: context = contexts.simple_context()",
                   "try:",
                   ("INDENT", 2),
                   $prem_fn_head,
                   $asserts_fn_lines,
                   $prem_fn_tail,
                   "POPINDENT",
                   "finally:",
                   ("INDENT", 2),
                   "context.done()",
                   "POPINDENT",
                   "POPINDENT",
                  )
        $fc_init = ("",
                    "fc_rule.fc_rule('%(name)s', This_rule_base, %(name)s," %
                      {'name': $rule_name},
                    ("INDENT", 2),
                    helpers.add_brackets($prem_decl_lines, '(', '),'),
                    helpers.list_format($patterns_out, '(', '))'),
                    "POPINDENT",
                   )

fc_premises0:
    use fc_premises($_, $_, (), (), (), (), $patterns_in, $patterns_in)

fc_premises1:
    use fc_premises($rule_name, $clause_num, ($first_prem, *$rest_prems),
                    ($fn_head1, *$fn_head2), ($fn_tail2, $fn_tail1),
                    $decl_lines, $patterns_in, $patterns_out)
    when
        !fc_premise($rule_name, $clause_num, $next_clause_num,
                    $first_prem, $fn_head1, $fn_tail1, $decl_lines1,
                    $patterns_in, $patterns_out1)
        !fc_premises($rule_name, $next_clause_num, $rest_prems,
                     $fn_head2, $fn_tail2, $decl_lines2,
                     $patterns_out1, $patterns_out)
        $decl_lines = $decl_lines1 + $decl_lines2

fc_premise:
    use fc_premise($rule_name, $clause_num, $next_clause_num,
                   (fc_premise, $kb_name, $entity_name, $arg_patterns),
                   $fn_head, ('POPINDENT',), $decl_lines,
                   $patterns_in, $patterns_in)
    when
        $fn_head = ("for dummy in (None,) if index == %d else \\" % $clause_num,
                    ('INDENT', 2),
                    ('INDENT', 11),
                    "lookup('%s', '%s', context, rule.foreach_patterns(%d)):" %
                        ($kb_name, $entity_name, $clause_num),
                    'POPINDENT',)
        $next_clause_num = $clause_num + 1
        $decl_lines = ("('%s', '%s'," % ($kb_name, $entity_name),
                       ('INDENT', 1),
                       helpers.list_format($arg_patterns, '(', ')),'),
                       "POPINDENT",
                      )

fc_python_premise:
    use fc_premise($rule_name, $clause_num, $clause_num,
                   $python_premise,
                   $fn_head, $fn_tail, (),
                   $patterns_in, $patterns_out)
    when
        python_premise($clause_num, $python_premise,
                       $patterns_in, $patterns_out,
                       $fn_head, $fn_tail)

assertions_0:
    use assertions((), (), $patterns_in, $patterns_in)

assertions_n:
    use assertions(($first_assertion, *$rest_assertions),
                   ($fn_lines1, *$fn_lines2), $patterns_in, $patterns_out)
    when
        !assertion($first_assertion, $fn_lines1, $patterns_in, $patterns_out1)
        !assertions($rest_assertions, $fn_lines2, $patterns_out1, $patterns_out)

assertion:
    use assertion(('assert', $kb_name, $entity_name, $patterns),
                  $fn_lines, $patterns_in, $patterns_out)
    when
        ($pat_nums, $patterns_out) = \
            helpers.merge_patterns($patterns, $patterns_in)
        $fn_lines = ("assert_('%s', '%s'," % ($kb_name, $entity_name),
                     ('INDENT', 8),
                     helpers.list_format(
                       ("rule.pattern(%d).as_data(context)" % pat_num
                        for pat_num in $pat_nums),
                       '(', '))'),
                     "POPINDENT",
                    )

python_assertion:
    use assertion((python_assertion, ($python_code, $_)),
                  $python_code, $patterns_in, $patterns_in)

bc_rules0:
    use bc_rules($_, (), (), (), ())

bc_rules1:
    use bc_rules($rb_name, ($bc_rule, *$bc_rest),
                 $bc_plan_lines,
                 ($bc_bc_fun1, *$bc_bc_funs_rest),
                 ($bc_bc_init1, *$bc_bc_init_rest))
    when
        !bc_rule($rb_name, $bc_rule, $bc_plan1, $bc_bc_fun1, $bc_bc_init1)
        !bc_rules($rb_name, $bc_rest,
                  $plan_rest, $bc_bc_funs_rest, $bc_bc_init_rest)
        $bc_plan_lines = $bc_plan1 + $plan_rest

bc_rule_:
    use bc_rule($rb_name, (bc_rule, $name, $goal, $bc_premises,
                                    $python_lines, $plan_vars_needed),
                $plan_lines, $bc_fun_lines, $bc_init_lines)
    when
        !bc_premises($rb_name, $name, $bc_premises, $plan_vars_needed,
                     $prem_plan_lines, $prem_fn_head, $prem_fn_tail,
                     $prem_decl_lines)
        ($plan_lines, $goal_fn_head, $goal_fn_tail, $goal_decl_lines) = \
            helpers.goal($rb_name, $name, $goal,
                         $prem_plan_lines, $python_lines)
        $bc_fun_lines = ($goal_fn_head,
                         $prem_fn_head,
                         'yield context' if $plan_lines else 'yield',
                         $prem_fn_tail,
                         $goal_fn_tail,
                        )
        $bc_init_lines = ($goal_decl_lines,
                          $prem_decl_lines,
                          "POPINDENT",
                         )

bc_premises:
    use bc_premises($rb_name, $rule_name, $bc_premises,
                    $plan_vars_needed, $plan_lines, $fn_head, $fn_tail,
                    $decl_lines)
    when
        !bc_premises1($rb_name, $rule_name, 1, $bc_premises, (), $patterns,
                      $plan_vars_needed, $plan_var_names,
                      $plan_lines1, $fn_head, $fn_tail)
        $pat_lines = helpers.list_format($patterns, '(', '))')
        $decl_lines = ('(' + ' '.join(tuple(repr(plan_var_name) + ','
                                            for plan_var_name
                                             in $plan_var_names)) +
                       '),',) + $pat_lines
        $plan_lines = tuple(itertools.chain(itertools.chain(
            ((lines for step, lines in $plan_lines1 if step is None),
             (lines for step, lines
                     in sorted(((step, lines) for step, lines in $plan_lines1
                                               if step is not None),
                               key=lambda (step, lines): step))))))

bc_premises1_0:
    use bc_premises1($_, $_, $_, (), $patterns, $patterns,
                     $plan_var_names, $plan_var_names,
                     (), (), ())

bc_premises1_n:
    use bc_premises1($rb_name, $rule_name, $clause_num,
                     ($first_prem, *$rest_prems),
                     $patterns_in, $patterns_out,
                     $plan_var_names_in, $plan_var_names_out,
                     $plan_lines, $fn_head, $fn_tail)
    when
        !bc_premise($rb_name, $rule_name, $clause_num, $first_prem,
                    $patterns_in, $patterns_out1,
                    $plan_var_names_in, $plan_var_names_out1,
                    $plan_lines1, $fn_head1, $fn_tail1)
        $next_clause_num = $clause_num + 1
        !bc_premises1($rb_name, $rule_name, $next_clause_num, $rest_prems,
                      $patterns_out1, $patterns_out,
                      $plan_var_names_out1, $plan_var_names_out,
                      $plan_lines2, $fn_head2, $fn_tail2)
        $plan_lines = $plan_lines1 + $plan_lines2
        $fn_head = $fn_head1 + $fn_head2
        $fn_tail = $fn_tail2 + $fn_tail1

bc_premise:
    use bc_premise($rb_name, $rule_name, $clause_num,
                   (bc_premise, $required, $kb_name, $entity_name,
                                  $arg_patterns, $plan_spec),
                   $patterns_in, $patterns_out,
                   $plan_var_names_in, $plan_var_names_out,
                   $plan_lines, $fn_head, $fn_tail)
    when
        $kb_name2 = $kb_name or "rule.rule_base.root_name"
        ($pat_nums, $patterns_out1) = \
            helpers.merge_patterns($arg_patterns, $patterns_in)
        $fn_head1 = ("for x_%(clause_num)d in "
                       "prove(%(kb_name)s, %(entity_name)s, context," %
                         {'clause_num': $clause_num,
                          'kb_name': $kb_name2,
                          'entity_name': $entity_name},
                     ('INDENT', 2),
                     ('INDENT', 13),
                     helpers.list_format(('rule.pattern(%d)' % pat_num
                                          for pat_num in $pat_nums),
                                         '(', ')):'),
                     "POPINDENT",
                    )
        !add_required($required, $rb_name, $rule_name, $clause_num,
                      $fn_head1, (POPINDENT), $fn_head2, $fn_tail2)
        !gen_plan_lines($rb_name, $rule_name, $clause_num, $plan_spec,
                        $patterns_out1, $patterns_out,
                        $fn_head3, $fn_tail3, $plan_lines, $plan_vars_needed)
        ($_, $plan_var_names_out) = helpers.merge_patterns($plan_vars_needed,
                                                           $plan_var_names_in)
        $fn_head = $fn_head2 + $fn_head3
        $fn_tail = $fn_tail3 + $fn_tail2

no_plan:
    use gen_plan_lines($rb_name, $rule_name, $clause_num,
                       None,
                       $patterns_in, $patterns_in, $fn_head, (), (), ())
    when
        $fn_head = ('assert x_%d is None, \\' % $clause_num,
                    ('INDENT', 2),
                    '"%(rb_name)s.%(rule_name)s: got unexpected plan from '
                     'when clause %(clause_num)d"' %
                     {'clause_num': $clause_num,
                      'rb_name': $rb_name,
                      'rule_name': $rule_name},
                    'POPINDENT',)

as_plan:
    use gen_plan_lines($rb_name, $rule_name, $clause_num,
                       ('as', $pat_var_name),
                       $patterns_in, $patterns_out,
                       $fn_head, $fn_tail,
                       (), ())
    when
        ($pat_num, $patterns_out) = \
            helpers.merge_pattern("contexts.variable('%s')" % $pat_var_name,
                                  $patterns_in)
        !plan_bindings($rb_name, $rule_name, $clause_num, $pat_var_name,
                       $pat_num, $fn_head, $fn_tail)

plan_spec:
    use gen_plan_lines($rb_name, $rule_name, $clause_num,
                       (plan_spec, $step_num, $plan_var_name,
                                   $python_code, $plan_vars_needed),
                       $patterns_in, $patterns_out,
                       $fn_head, $fn_tail,
                       (($step_num, $python_code),), $plan_vars_needed)
    when
        ($pat_num, $patterns_out) = \
            helpers.merge_pattern("contexts.variable('%s')" % $plan_var_name,
                                  $patterns_in)
        !plan_bindings($rb_name, $rule_name, $clause_num, $plan_var_name,
                       $pat_num, $fn_head, $fn_tail)

plan_bindings:
    use plan_bindings($rb_name, $rule_name, $clause_num, $plan_var_name,
                      $pat_num, $fn_head, $fn_tail)
    when
        $fn_head = ('assert x_%d is not None, \\' % $clause_num,
                    ('INDENT', 2),
                    '"%(rb_name)s.%(rule_name)s: expected plan from '
                     'when clause %(clause_num)d"' %
                     {'clause_num': $clause_num,
                      'rb_name': $rb_name,
                      'rule_name': $rule_name},
                    'POPINDENT',
                    "mark%d = context.mark(True)" % $clause_num,
                    "if not rule.pattern(%d).match_data(context, context, "
                     "x_%d):" % ($pat_num, $clause_num),
                    ('INDENT', 2),
                    'raise AssertionError("%(rb_name)s.%(rule_name)s: '
                     'plan match to $%(plan_var_name)s failed in '
                     'when clause %(clause_num)d")' %
                     {'clause_num': $clause_num,
                      'plan_var_name': $plan_var_name,
                      'rb_name': $rb_name,
                      'rule_name': $rule_name},
                    'POPINDENT',
                    "context.end_save_all_undo()")
        $fn_tail = ("context.undo_to_mark(mark%d)" % $clause_num,)

not_required:
    use add_required(False, $_, $_, $_,
                     $fn_head, $fn_tail, $fn_head, $fn_tail)

required:
    use add_required(True, $rb_name, $rule_name, $clause_num,
                     $fn_head1, $fn_tail1, $fn_head, $fn_tail)
    when
        $fn_head = ("flag_%d = False" % $clause_num,
                    $fn_head1,
                    "flag_%d = True" % $clause_num,
                   )
        $fn_tail = ($fn_tail1,
                    "if not flag_%d:" % $clause_num,
                    ("INDENT", 2),
                    "raise AssertionError(\"%s.%s: 'when' clause %d failed\")"
                       % ($rb_name, $rule_name, $clause_num),
                    "POPINDENT",
                   )

bc_python_premise:
    use bc_premise($rb_name, $rule_name, $clause_num,
                   $python_premise,
                   $patterns_in, $patterns_out,
                   $plan_var_names, $plan_var_names,
                   (), $fn_head, $fn_tail)
    when
        python_premise($clause_num, $python_premise,
                       $patterns_in, $patterns_out,
                       $fn_head, $fn_tail)

python_eq:
    use python_premise($clause_num,
                       (python_eq, $pattern, ($python_code, $_)),
                       $patterns_in, $patterns_out, $fn_head, $fn_tail)
    when
        ($pat_num, $patterns_out) = \
            helpers.merge_pattern($pattern, $patterns_in)
        $python_code2 = $python_code[:-1] + ($python_code[-1] + '):',)
        $fn_head = ("mark%d = context.mark(True)" % $clause_num,
                    "if rule.pattern(%d).match_data(context, context," %
                       $pat_num,
                    ('INDENT', 2),
                    ('INDENT', 5),
                    $python_code2,
                    "POPINDENT",
                    "context.end_save_all_undo()",
                   )
        $fn_tail = ('POPINDENT',
                    "else: context.end_save_all_undo()",
                    "context.undo_to_mark(mark%d)" % $clause_num,)

python_in:
    use python_premise($clause_num,
                       (python_in, $pattern, ($python_code, $_)),
                       $patterns_in, $patterns_out, $fn_head, $fn_tail)
    when
        ($pat_num, $patterns_out) = \
            helpers.merge_pattern($pattern, $patterns_in)
        $python_code2 = $python_code[:-1] + ($python_code[-1] + ':',)
        $fn_head = ("for python_ans in \\",
                    ('INDENT', 2),
                    ('INDENT', 2),
                    $python_code2,
                    'POPINDENT',
                    "mark%d = context.mark(True)" % $clause_num,
                    "if rule.pattern(%d).match_data(context, context, "
                        "python_ans):" % $pat_num,
                    ('INDENT', 2),
                    "context.end_save_all_undo()",
                   )
        $fn_tail = ('POPINDENT',
                    "else: context.end_save_all_undo()",
                    "context.undo_to_mark(mark%d)" % $clause_num,
                    'POPINDENT',)

python_check:
    use python_premise($clause_num,
                       (python_check, ($python_code, $_)),
                       $patterns_in, $patterns_in,
                       $fn_head, ('POPINDENT',))
    when
        $python_code2 = $python_code[:-1] + ($python_code[-1] + ':',)
        $fn_head = ("if " + $python_code2[0].strip(),
                    $python_code2[1:],
                    ('INDENT', 2),
                   )

bc_extras
    from pyke.compiler import helpers
