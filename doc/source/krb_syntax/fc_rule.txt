.. $Id$
.. 
.. Copyright Â© 2007 Bruce Frederiksen
.. 
.. Permission is hereby granted, free of charge, to any person obtaining a copy
.. of this software and associated documentation files (the "Software"), to deal
.. in the Software without restriction, including without limitation the rights
.. to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
.. copies of the Software, and to permit persons to whom the Software is
.. furnished to do so, subject to the following conditions:
.. 
.. The above copyright notice and this permission notice shall be included in
.. all copies or substantial portions of the Software.
.. 
.. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.. IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.. FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
.. AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.. LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
.. OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
.. THE SOFTWARE.

restindex
    crumb: Fc_rule
    page-description:
        The syntax of a forward-chaining rule.
    /description
    format: rest
    encoding: utf8
    output-encoding: utf8
    include: yes
    initialheaderlevel: 2
/restindex

=============================================
Fc_rule Syntax
=============================================

Fc_rule
=============

Forward-chaining_ rules_ have three parts:

#. A unique name.
#. An optional ``foreach`` clause.
#. An ``assert`` clause.

::

    fc_rule ::= IDENTIFIER NL INDENT
                   [fc_foreach]
                   fc_assert
                DEINDENT

The ``IDENTIFIER`` uniquely names this rule_ and is used as the corresponding
python function name in the generated <rb_name>_fc.py file.

Foreach clause
=================

::

    fc_foreach ::= 'foreach' NL INDENT
                       {fc_premise NL}
                   DEINDENT

    fc_premise ::= fact_pattern
                 | 'first' fc_premise
                 | 'first' NL
                     INDENT
                        {fc_premise NL}
                     DEINDENT
                 | 'forall' NL
                     INDENT
                        {fc_premise NL}
                     DEINDENT
                   [ 'require' NL
                       INDENT
                          {fc_premise NL}
                       DEINDENT ]
                 | 'notany' NL
                     INDENT
                        {fc_premise NL}
                     DEINDENT
                 | python_premise

    fact_pattern ::= IDENTIFIER '.' IDENTIFIER '(' [{pattern,}] ')'

Here are links to the definitions for pattern_ and python_premise_.

If the ``foreach`` clause is **not** used, the rule_ is always fired once.

If the ``foreach`` clause **is** used, the rule_ is fired for each
combination of true premises.

The ``first`` clause fails on backtracking so that it only produces one
result (the first one).  This does not mean that backtracking between
multiple sub-premises within the ``first`` clause will fail internal to
``first`` clause, but that once the
premise following the ``first`` clause is tried, the entire ``first`` clause
will fail on backtracking.

The ``forall`` and ``notany`` clauses undo all `pattern variable`_ bindings
before the following ``fc_premise`` is run.  Thus, they can only be used to
test values produced by prior ``fc_premises``, but not to generate them for
subsequent ``fc_premises`` (except by using the ``python`` clause, see
python_premise_).

If the ``require`` clause is missing from the ``forall`` clause, the ``forall``
clause always succeeds.

Assert clause
=================

::

    fc_assert ::= 'assert' NL INDENT
                      {assertion NL}
                  DEINDENT

    assertion ::= fact_pattern
                | python_statements

Here is the link to the definitions of python_statements_.

The ``assert`` clause lists new facts_ to assert, and/or python
statements to execute each time the rule_ is fired.  Each of these may
include `pattern variables`_ which should also appear in the ``foreach``
clause where they are bound to a value.  These values will then be substituted
into the facts_ and python statements.

.. _facts: ../overview/knowledge_bases/fact_bases.html#facts
.. _forward-chaining: ../overview/rules/forward_chaining.html
.. _pattern: pattern.html
.. _pattern variable: pattern.html#pattern-variable
.. _pattern variables: `pattern variable`_
.. _python_premise: python_premise.html
.. _python_statements: python_premise.html#python-statements
.. _rule: ../overview/rules/index.html
.. _rules: rule_
