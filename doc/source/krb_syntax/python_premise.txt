.. $Id$
.. 
.. Copyright Â© 2007 Bruce Frederiksen
.. 
.. Permission is hereby granted, free of charge, to any person obtaining a copy
.. of this software and associated documentation files (the "Software"), to deal
.. in the Software without restriction, including without limitation the rights
.. to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
.. copies of the Software, and to permit persons to whom the Software is
.. furnished to do so, subject to the following conditions:
.. 
.. The above copyright notice and this permission notice shall be included in
.. all copies or substantial portions of the Software.
.. 
.. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.. IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.. FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
.. AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.. LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
.. OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
.. THE SOFTWARE.

restindex
    crumb: Python Premise
    page-description:
        The syntax of a python premise.
    /description
    format: rest
    encoding: utf8
    output-encoding: utf8
    include: yes
    initialheaderlevel: 2
/restindex

=============================================
Python Premise Syntax
=============================================

::

    python_premise ::= pattern '=' python_exp
                     | pattern 'in' python_exp
                     | 'check' python_exp

Each of these clauses results in a python expression being executed.  Their
meaning is as follows:

pattern_ '=' python_exp
    *python_exp* is evaluated and the result matched
    with pattern_.  If the result does not match,
    the clause fails and backtracking_ is initiated.
    The clause always fails on backtracking_, meaning that it only produces
    a single result (contrasted with ``in``).
pattern_ 'in' python_exp
    *python_exp* is evaluated and the first element
    from the resulting *iterable* is matched
    with pattern_.  On backtracking_, successive
    elements from the result are matched with
    pattern_.  When the result is exhausted, the clause fails.

    This has the effect of offering each element of the result, one at a
    time, to the subsequent premise clauses.  Each element is thus acted on
    individually.
'check' python_exp
    *python_exp* is evaluated.  If the result is
    python "true" the clause succeeds, otherwise
    it fails.  The clause always fails on backtracking_.

.. _backtracking: ../overview/rules/backward_chaining.html#backtracking
.. _pattern: pattern.html
