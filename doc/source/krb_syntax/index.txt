.. $Id$
.. 
.. Copyright Â© 2007 Bruce Frederiksen
.. 
.. Permission is hereby granted, free of charge, to any person obtaining a copy
.. of this software and associated documentation files (the "Software"), to deal
.. in the Software without restriction, including without limitation the rights
.. to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
.. copies of the Software, and to permit persons to whom the Software is
.. furnished to do so, subject to the following conditions:
.. 
.. The above copyright notice and this permission notice shall be included in
.. all copies or substantial portions of the Software.
.. 
.. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.. IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.. FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
.. AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.. LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
.. OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
.. THE SOFTWARE.

restindex
    crumb: KRB Syntax
    page-description:
        Syntax of the knowledge rule base (KRB) files, which is where you
        write your rules.
    /description
    section-pages: , fc_rule, bc_rule, pattern, compound_premise, python_premise
    format: rest
    encoding: utf8
    output-encoding: utf8
    include: yes
/restindex

===================
KRB Syntax
===================

This section describes the syntax for defining rules_ in the KRB files.

Legend
==============

To describe this syntax, the following punctuation is used:

'*any_chars*'
   required punctuation or keyword: *any_chars*
*a* | *b*
   alternation: *a* or *b*
[*a*]
   optional *a*
{*a*}
   one or more *a*'s.  If *a* ends in a comma, the last comma is optional.
NL
   means one or more newlines

Lexical Structure
=======================

The KRB lexical structure is much like python.  Like python, indenting is
significant.  It uses the same commenting, line continuation and literal
formats for strings and numbers (except complex numbers).  It also uses the
same rules for forming identifiers.

The two notable exceptions to python conventions are:

#. Identifiers may be used as strings, without requiring quotes.

   - ``foobar`` is the same as ``'foobar'``

#. Singleton tuples do not require a trailing comma.

   - ``(1)`` is the same as ``(1,)``


Keywords
==================

=========  ===========  =========
as         foreach      taking 
assert     in           True 
bc_extras  None         use 
check      plan_extras  when 
extending  python       with 
False      step         without 
fc_extras                       
=========  ===========  =========



Syntax of the Entire KRB File
===================================

::

    file ::= [NL]

             ['extending' IDENTIFIER ['without' {IDENTIFIER,}] NL]

             [{fc_rule}
              ['fc_extras' NL INDENT
                 {<python_statement> NL}
               DEINDENT]]

             [{bc_rule}
              ['bc_extras' NL INDENT
                 {<python_statement> NL}
               DEINDENT]
              ['plan_extras' NL INDENT
                 {<python_statement> NL}
               DEINDENT]]

The KRB file has three optional parts.  It must contain at least one rule_
(either forward-chaining_ or backward-chaining_).

The filename (minus the .krb extension) is the name of the `rule base`_.
This must be a legal python identifier.

Extending clause
-----------------

The optional ``extending`` clause, if used, is the first line of the file.
This defines the parent `rule base`_ that this `rule base`_ inherits_ from.
It may also specify a list of backward-chaining_ goal names to be excluded
from this inheritance.

Forward-Chaining Section
--------------------------

If the krb file contains any forward-chaining_ rules_, a python source file
will be created named <rb_name>_fc.py, where <rb_name> is the `rule base`_
name.

The syntax of a forward-chaining_ rule_ (fc_rule_) is defined elsewhere__.

The ``fc_extras`` can only be used if there are forward-chaining_ rules_.
This allows you to add other python code (for example, ``import`` statements)
to the generated python source file.

.. __: fc_rule_

Backward-Chaining Section
--------------------------

If the krb file contains any backward-chaining_ rules_, a python source file
will be created named <rb_name>_bc.py, where <rb_name> is the `rule base`_
name.

The syntax of a backward-chaining_ rule_ (bc_rule_) is defined elsewhere__.

The ``bc_extras`` can only be used if there are backward-chaining_ rules_.
This allows you to add other python code (for example, ``import`` statements)
to the generated python source file.

In addition, if any of the backward-chaining_ rules_ have plan_ code (for
example, a ``with`` clause or subgoals in the ``when`` clause that produce
plans_), a python source file will be created name <rb_name>_plans.py, where
<rb_name> is the `rule base`_ name.

You use the ``plan_extras`` to include arbitrary python code in this plans
file.

.. __: bc_rule_
.. _backward-chaining: ../overview/rules/backward_chaining.html
.. _bc_rule: bc_rule.html
.. _fc_rule: fc_rule.html
.. _forward-chaining: ../overview/rules/forward_chaining.html
.. _inherits: ../overview/knowledge_bases/rule_bases.html#rule-base-inheritance
.. _plan: ../overview/plans.html
.. _plans: plan_
.. _rule: ../overview/rules/index.html
.. _rules: rule_
.. _rule base: ../overview/knowledge_bases/rule_bases.html
