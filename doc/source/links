.. _about pyke: about_pyke/index.html
.. _activated: activate_
.. _activate: using_pyke.html#setting-up-each-case
.. _activating: activate_
.. _activation: activate_
.. _active: knowledge_bases/rule_bases.html#rule-base-activation
.. _anonymous variable: logic_programming/pattern_matching/pattern_variables.html#anonymous-pattern-variables
.. _ask_tty: knowledge_bases/question_bases.html#presenting-questions-to-your-end-users
.. _assert: using_pyke.html#setting-up-each-case
.. _asserted: assert_
.. _asserts: assert_
.. _backtracked: backtracking_
.. _backtracking: logic_programming/rules/index.html#backtracking
.. _backward chaining: logic_programming/rules/backward_chaining.html
.. _backward-chaining: `backward chaining`_
.. _backward-chaining rule: logic_programming/rules/backward_chaining.html
.. _backward-chaining rules: `backward-chaining rule`_
.. _bc_premise: pyke_syntax/krb_syntax/bc_rule.html#when-clause
.. _bc_rule: `backward-chaining rule`_
.. _Bc_rule Syntax: bc_rule_
.. _case specific facts: knowledge_bases/fact_bases.html#case-specific-facts
.. _category: `rule base category`_
.. _command: knowledge_bases/special.html#running-commands
.. _commands: command_
.. _compound_premise: pyke_syntax/krb_syntax/compound_premise.html
.. _cooked: `cooking functions`_
.. _cooking functions: about_pyke/cooking_functions.html
.. _copy_reg: http://docs.python.org/lib/module-copyreg.html
.. _cut operator: http://en.wikipedia.org/wiki/Cut_%28logic_programming%29
.. _Docutils: http://sourceforge.net/projects/docutils
.. _easy_install: http://peak.telecommunity.com/DevCenter/EasyInstall
.. _engine: `knowledge engine`_
.. _engine.reset: using_pyke.html#setting-up-each-case
.. _Examples: examples.html
.. _extending: pyke_syntax/krb_syntax/index.html#extending-clause
.. _extending clause: extending_
.. _fact base: knowledge_bases/fact_bases.html
.. _fact bases: `fact base`_
.. _fact: knowledge_bases/fact_bases.html#facts
.. _facts: fact_
.. _family_relations: examples.html#family-relations
.. _fc_premise: pyke_syntax/krb_syntax/fc_rule.html#foreach-clause
.. _fc_rule: pyke_syntax/krb_syntax/fc_rule.html
.. _forall: pyke_syntax/krb_syntax/compound_premise.html#forall-premise
.. _forall premise: forall_
.. _forward-chaining: logic_programming/rules/forward_chaining.html
.. _forward-chaining rule: forward-chaining_
.. _forward-chaining rules: `forward-chaining rule`_
.. _fully bound: logic_programming/pattern_matching/matching_patterns.html#binding-to-a-tuple-pattern
.. _functools: http://docs.python.org/lib/module-functools.html
.. _functools.partial: functools_
.. _goal: logic_programming/rules/backward_chaining.html
.. _goals: goal_
.. _home page: index.html
.. _how to call Pyke: using_pyke.html
.. _HTMLTemplates: http://py-templates.sourceforge.net/htmltemplate/index.html
.. _inherit: knowledge_bases/rule_bases.html#rule-base-inheritance
.. _inherits: inherit_
.. _.kfb file: pyke_syntax/kfb_syntax.html
.. _.kfb files: `.kfb file`_
.. _knapsack problem: http://en.wikipedia.org/wiki/Knapsack_problem
.. _knowledge base: knowledge_bases/index.html
.. _knowledge bases: `knowledge base`_
.. _knowledge_engine.engine: using_pyke.html#initializing-pyke
.. _knowledge engine: `knowledge_engine.engine`_
.. _.kqb file: pyke_syntax/kqb_syntax.html
.. _.kqb files: `.kqb file`_
.. _.krb file: pyke_syntax/krb_syntax/index.html
.. _.krb files: `.krb file`_
.. _.krb: `.krb file`_
.. _krb_traceback: using_pyke.html#krb-traceback
.. _Literal patterns: logic_programming/pattern_matching/literal_patterns.html
.. _loading: `knowledge_engine.engine`_
.. _Logic Programming: http://en.wikipedia.org/wiki/Logic_programming
.. _logic programming in pyke: logic_programming/index.html
.. _matched: `pattern matches`_
.. _matching two patterns together: logic_programming/pattern_matching/matching_patterns.html
.. _MySQL: http://www.mysql.com/
.. _notany: pyke_syntax/krb_syntax/compound_premise.html#notany-premise
.. _notany premise: notany_
.. _package: http://www.python.org/doc/essays/packages.html
.. _pathological question: logic_programming/pattern_matching/matching_patterns.html#pathological-question
.. _pattern: logic_programming/pattern_matching/index.html
.. _pattern matches: logic_programming/pattern_matching/index.html
.. _pattern matching: `pattern matches`_
.. _pattern variable: logic_programming/pattern_matching/pattern_variables.html
.. _pattern variables: `pattern variable`_
.. _patterns: pattern_
.. _pickled: using_pyke.html#running-and-pickling-plans
.. _pickle: http://docs.python.org/lib/module-pickle.html
.. _pickles: pickle_
.. _plan: logic_programming/plans.html
.. _plan_spec: pyke_syntax/krb_syntax/bc_rule.html#plan-spec
.. _plans: plan_
.. _PLY 2.5: http://www.dabeaz.com/ply/
.. _premise: logic_programming/rules/index.html#premises-and-conclusions
.. _premises: premise_
.. _print_stats: using_pyke.html#other-functions
.. _programming in the large: http://portal.acm.org/citation.cfm?id=808431
.. _program in the large: `programming in the large`_
.. _program startup: using_pyke.html#initializing-pyke
.. _Prolog: http://en.wikipedia.org/wiki/Prolog
.. _prove_1: prove_
.. _prove_n: `prove_1`_
.. _prove: using_pyke.html#proving-goals
.. _proving: prove_
.. _PyCon 2008: http://us.pycon.org/2008/about/
.. _Pyke: http://groups.google.com/group/pyke
.. _Pyke project download page: http://sourceforge.net/project/showfiles.php?group_id=207724
.. _pypi: http://pypi.python.org/pypi
.. _Python: http://www.python.org
.. _Python egg file: http://peak.telecommunity.com/DevCenter/PythonEggs
.. _python_premise: pyke_syntax/krb_syntax/python_premise.html
.. _python_statements: pyke_syntax/krb_syntax/python_premise.html#python-statements
.. _question base: knowledge_bases/question_bases.html
.. _question bases: `question base`_
.. _question: knowledge_bases/question_bases.html
.. _questions: question_
.. _regular expression syntax: http://docs.python.org/lib/re-syntax.html
.. _reset: using_pyke.html#setting-up-each-case
.. _Rest2web: http://sourceforge.net/projects/rest2web
.. _rule base category: knowledge_bases/rule_bases.html#rule-base-categories
.. _rule base: knowledge_bases/rule_bases.html
.. _rule base's: `rule base`_
.. _rule bases: `rule base`_
.. _rule: logic_programming/rules/index.html
.. _rule's: rule_
.. _rules: rule_
.. _siege: http://www.joedog.org/JoeDog/Siege
.. _special: knowledge_bases/special.html
.. _sqlgen: examples.html#sqlgen
.. _statement: logic_programming/statements.html
.. _statements: statement_
.. _string.Template: http://docs.python.org/lib/node40.html
.. _subprocess.CalledProcessError: http://docs.python.org/lib/node530.html
.. _subprocess.Popen: http://docs.python.org/lib/node528.html
.. _taking clause: pyke_syntax/krb_syntax/bc_rule.html#taking-clause
.. _traceback: http://docs.python.org/lib/module-traceback.html
.. _Tuple patterns: logic_programming/pattern_matching/tuple_patterns.html
.. _TurboGears 2: http://turbogears.org/2.0/
.. _variables: `pattern variable`_
.. _web_framework: examples.html#web-framework
.. _when clause: pyke_syntax/krb_syntax/bc_rule.html#when-clause
.. _with clause: pyke_syntax/krb_syntax/bc_rule.html#with-clause
.. _WSGI: http://www.python.org/dev/peps/pep-0333/
.. _wxpython: http://www.wxpython.org/
