.. $Id$
.. 
.. Copyright Â© 2008 Bruce Frederiksen
.. 
.. Permission is hereby granted, free of charge, to any person obtaining a copy
.. of this software and associated documentation files (the "Software"), to deal
.. in the Software without restriction, including without limitation the rights
.. to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
.. copies of the Software, and to permit persons to whom the Software is
.. furnished to do so, subject to the following conditions:
.. 
.. The above copyright notice and this permission notice shall be included in
.. all copies or substantial portions of the Software.
.. 
.. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.. IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.. FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
.. AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.. LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
.. OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
.. THE SOFTWARE.

restindex
    crumb: Statements
    page-description:
        What is a *statement* is in Pyke?
    /description
    format: rest
    encoding: utf8
    output-encoding: utf8
    include: yes
    initialheaderlevel: 2
/restindex

===========
Statements
===========

A *statement* is a statement of fact.  They are the bread and butter of Pyke.
Statements are the data values that Pyke acts upon.

Statements in Pyke are very structured.  They have three components:

#. The name of a `knowledge base`_.
#. The name of a *knowledge entity*.
#. The statement arguments.

The syntax for a statement looks like this::

    statement ::= name '.' name '(' {argument,} ')'

The first name is the name of the knowledge base.  Within `backward-chaining
rules`_, this may be omitted to imply the currently selected `rule base`_ for
this `rule base category`_.

The second name is the name of the *knowledge entity*.  You can think of this
as naming the relationship amoung its arguments.

The arguments can be any simple Python data value (numbers, strings, None,
True or False) or tuples of these values (including nested tuples).
Statements are supposed to be immutable, so all of the arguments are
immutable.

Like rows in relational database tables, it doesn't make sense to have two
identical statements.

.. _backward-chaining rules: rules/backward_chaining.html
.. _rule base: ../knowledge_bases/rule_bases.html
.. _rule base category: FIX
.. _knowledge base: FIX
