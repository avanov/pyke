restindex
    crumb: Rules
    page-description:
        Explanation of rules, forward-chaining and backward-chaining.
    /description
    section-pages: , forward_chaining, backward_chaining
    format: rest
    encoding: utf8
    output-encoding: utf8
    include: yes
/restindex

=============================================
Rules
=============================================

Rules have two parts to them: an **if** part (the *premises*),
and a **then** part (the *conclusions*).  (Though pyke uses different
names for these).

Each of these **if** and **then** parts contain one or more facts represented
by *patterns*.
Logically, the rule says that if **all** of the premises in the **if** part of
the rule are true, then each of the conclusions in the **then** part of the
rule must also be true.

Rules are specified individually within a rule base.  They are not nested
or explicitly linked to each other.  So the question is how does pyke combine
these rules in order to accomplish some larger task?  The answer depends on
whether the rule is a *forward-chaining* or *backward-chaining* rule.
Pyke processes forward-chaining rules and backward-chaining rules in two
distinct phases:

- All forward-chaining rules are processed when a rule base is *activated*.

  - These rules assert new facts, and can activate more specific rule
    bases.

- Backward-chaining rules are processed when your program asks pyke to
  *prove* a specific *goal*.

  - These rules don't assert new facts or activate more specific rule
    bases.  But they do have the ability to assemble python functions into
    a customized call graph to meet a specific need.

